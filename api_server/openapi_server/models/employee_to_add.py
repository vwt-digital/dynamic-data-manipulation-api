# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EmployeeToAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firstname=None, lastname=None):  # noqa: E501
        """EmployeeToAdd - a model defined in OpenAPI

        :param firstname: The firstname of this EmployeeToAdd.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this EmployeeToAdd.  # noqa: E501
        :type lastname: str
        """
        self.openapi_types = {
            'firstname': str,
            'lastname': str
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname'
        }

        self._firstname = firstname
        self._lastname = lastname

    @classmethod
    def from_dict(cls, dikt) -> 'EmployeeToAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmployeeToAdd of this EmployeeToAdd.  # noqa: E501
        :rtype: EmployeeToAdd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self):
        """Gets the firstname of this EmployeeToAdd.


        :return: The firstname of this EmployeeToAdd.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this EmployeeToAdd.


        :param firstname: The firstname of this EmployeeToAdd.
        :type firstname: str
        """
        if firstname is not None and len(firstname) > 100:
            raise ValueError("Invalid value for `firstname`, length must be less than or equal to `100`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this EmployeeToAdd.


        :return: The lastname of this EmployeeToAdd.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this EmployeeToAdd.


        :param lastname: The lastname of this EmployeeToAdd.
        :type lastname: str
        """
        if lastname is not None and len(lastname) > 100:
            raise ValueError("Invalid value for `lastname`, length must be less than or equal to `100`")  # noqa: E501

        self._lastname = lastname
